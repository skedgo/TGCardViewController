//
//  TGCardStyleKit.swift
//  TGCardViewController
//
//  Created by Adrian Schönig on 12.03.19.
//  Copyright © 2019 SkedGo Pty Ltd. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

class TGCardStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic class func drawHeaderNextIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, lineWidth: CGFloat = 3) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)



        //// Variable Declarations
        let length: CGFloat = 20
        let iconScale: CGFloat = length / 20.0
        let padding: CGFloat = lineWidth / 2.0
        let iconOrigin = CGPoint(x: padding, y: padding)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: iconOrigin.x, y: iconOrigin.y)
        context.scaleBy(x: iconScale, y: iconScale)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 17))
        UIColor.black.setStroke()
        bezierPath.lineWidth = lineWidth
        bezierPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic class func drawCardCloseIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, closeButtonBackground: UIColor = UIColor(red: 0.502, green: 0.498, blue: 0.502, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)



        //// Variable Declarations
        let length: CGFloat = 20
        let iconScale: CGFloat = length / 20.0
        let innerOrigin = CGPoint(x: length / 4.0, y: length / 4.0)

        //// Group
        context.saveGState()
        context.scaleBy(x: iconScale, y: iconScale)



        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: length, height: length))
        closeButtonBackground.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: innerOrigin.x, y: innerOrigin.y)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: innerOrigin.x, y: innerOrigin.y)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 0))
        UIColor.white.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()

        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic class func drawFloatingButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit, floatingButtonBackground: UIColor = UIColor(red: 0.000, green: 0.800, blue: 0.400, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 60, resizedFrame.height / 60)



        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.54)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 4

        //// Variable Declarations
        let length: CGFloat = 20
        let innerOrigin = CGPoint(x: length / 4.0, y: length / 4.0)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: innerOrigin.x, y: innerOrigin.y, width: (length + 30), height: (length + 30)))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        floatingButtonBackground.setFill()
        ovalPath.fill()
        context.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.5, y: 30.16))
        bezierPath.addLine(to: CGPoint(x: 39.5, y: 30.16))
        bezierPath.move(to: CGPoint(x: 30.06, y: 20.5))
        bezierPath.addLine(to: CGPoint(x: 30.06, y: 40.5))
        floatingButtonBackground.setFill()
        bezierPath.fill()
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic class func imageOfHeaderNextIcon(lineWidth: CGFloat = 3) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TGCardStyleKit.drawHeaderNextIcon(lineWidth: lineWidth)

        let imageOfHeaderNextIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfHeaderNextIcon
    }

    @objc dynamic class func imageOfCardCloseIcon(closeButtonBackground: UIColor = UIColor(red: 0.502, green: 0.498, blue: 0.502, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TGCardStyleKit.drawCardCloseIcon(closeButtonBackground: closeButtonBackground)

        let imageOfCardCloseIcon = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfCardCloseIcon
    }

    @objc dynamic class func imageOfFloatingButton(floatingButtonBackground: UIColor = UIColor(red: 0.000, green: 0.800, blue: 0.400, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            TGCardStyleKit.drawFloatingButton(floatingButtonBackground: floatingButtonBackground)

        let imageOfFloatingButton = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfFloatingButton
    }




    @objc(TGCardStyleKitResizingBehavior)
    enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
